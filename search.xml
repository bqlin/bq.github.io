<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PlistBuddy ‰ΩøÁî®]]></title>
    <url>%2FiOS%2FPlistBuddy%20%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[PlistÊñá‰ª∂ÊòØiOSÈ°πÁõÆ‰∏≠ÊØîËæÉÊôÆÈÅçÁöÑ‰∏ÄÁßçÊñá‰ª∂Ê†ºÂºèÔºåÁ±ª‰ºº‰∫éXMLÔºåÈÉΩÊòØÈÄöËøáÈîÆÂÄºÂØπÁöÑÂΩ¢ÂºèÂ≠òÂÇ®Êï∞ÊçÆÔºåËÄåPlistBuddyÂàôÊòØMacËá™Â∏¶ÁöÑ‰∏ìÈó®Ëß£ÊûêplistÁöÑÂèãÂ•ΩÂ∑•ÂÖ∑„ÄÇÂ¶ÇÊûúÊúâËá™Âä®ÂåñÊâìÂåÖÔºåÂä®ÊÄÅ‰øÆÊîπiOSÂ∑•Á®ãÈ°πÁõÆ‰∏≠ÁöÑinfo.plistÊñá‰ª∂ÁöÑÈúÄÊ±ÇÔºå‰ºöÁî®Âà∞PlistBuddy„ÄÇ PlistBuddy ÊñáÊ°£ 1234567891011121314151617181920212223242526272829303132333435363738394041424344$ PlistBuddy --helpCommand Format: Help - Prints this information Exit - Exits the program, changes are not saved to the file Save - Saves the current changes to the file Revert - Reloads the last saved version of the file Clear [&lt;Type&gt;] - Clears out all existing entries, and creates root of Type Print [&lt;Entry&gt;] - Prints value of Entry. Otherwise, prints file Set &lt;Entry&gt; &lt;Value&gt; - Sets the value at Entry to Value Add &lt;Entry&gt; &lt;Type&gt; [&lt;Value&gt;] - Adds Entry to the plist, with value Value Copy &lt;EntrySrc&gt; &lt;EntryDst&gt; - Copies the EntrySrc property to EntryDst Delete &lt;Entry&gt; - Deletes Entry from the plist Merge &lt;file.plist&gt; [&lt;Entry&gt;] - Adds the contents of file.plist to Entry Import &lt;Entry&gt; &lt;file&gt; - Creates or sets Entry the contents of fileEntry Format: Entries consist of property key names delimited by colons. Array items are specified by a zero-based integer index. Examples: :CFBundleShortVersionString :CFBundleDocumentTypes:2:CFBundleTypeExtensionsTypes: string array dict bool real integer date dataExamples: Set :CFBundleIdentifier com.apple.plistbuddy Sets the CFBundleIdentifier property to com.apple.plistbuddy Add :CFBundleGetInfoString string "App version 1.0.1" Adds the CFBundleGetInfoString property to the plist Add :CFBundleDocumentTypes: dict Adds a new item of type dict to the CFBundleDocumentTypes array Add :CFBundleDocumentTypes:0 dict Adds the new item to the beginning of the array Delete :CFBundleDocumentTypes:0 dict Deletes the FIRST item in the array Delete :CFBundleDocumentTypes Deletes the ENTIRE CFBundleDocumentTypes array ËæìÂá∫PlistBuddy -c ‚Äòprint‚Äô 1PlistBuddy -c 'print' ColorCustom.plist ÂÆπÂô®Á±ªÂûãÂèñÂÄº‰Ωú‰∏∫ÈîÆ:&lt;ÈîÆ&gt;:&lt;Á¥¢Âºï&gt;:&lt;ÈîÆ&gt;‰ª•Ê≠§Á±ªÊé®„ÄÇ 1:CFBundleDocumentTypes:2:CFBundleTypeExtensions Êõ¥ÊîπPlistBuddy -c ‚ÄòSet &lt;ÈîÆ&gt; &lt;ÂÄºÁ±ªÂûã&gt; &lt;ÂÄº&gt;‚Äô 1PlistBuddy -c 'Set :login_loginButton string "testColor sdf"' ColorCustom.plist Âà†Èô§PlistBuddy -c ‚ÄòDelete &lt;ÈîÆ&gt;‚Äô 1PlistBuddy -c 'Delete :Version' info.plist Ê∑ªÂä†Êñ∞ÂÄºPlistBuddy -c ‚ÄòAdd :Version string 1.0‚Äô info.plist Ê∑ªÂä†ÊôÆÈÄöÂ≠óÊÆµPlistBuddy -c ‚ÄòAdd &lt;ÈîÆ&gt; &lt;ÂÄºÁ±ªÂûã&gt; &lt;ÂÄº&gt;‚Äô 1PlistBuddy -c 'Add :Version string 1.0' info.plist Ê∑ªÂä†Êï∞ÁªÑÂ≠óÊÆµPlistBuddy -c ‚ÄòAdd :&lt;Êï∞ÁªÑÂêçÁß∞&gt; array‚Äô PlistBuddy -c ‚ÄòAdd :&lt;Êï∞ÁªÑÂêçÁß∞&gt;: &lt;ÂÄºÁ±ªÂûã&gt; &lt;ÂÄº&gt;‚Äô 12345# ÂÖàÊ∑ªÂä†keyÂÄºPlistBuddy -c 'Add :Application array' info.plist# Ê∑ªÂä†valueÂÄºPlistBuddy -c 'Add :Application: string app1' info.plistPlistBuddy -c 'Add :Application: string app2' info.plist Ê∑ªÂä†Â≠óÂÖ∏Â≠óÊÆµPlistBuddy -c ‚ÄòAdd :&lt;Â≠óÂÖ∏ÂêçÁß∞&gt; dict‚Äô info.plistPlistBuddy -c ‚ÄòAdd :&lt;Â≠óÂÖ∏ÂêçÁß∞&gt;:&lt;Â≠óÂÖ∏ÈîÆ&gt; &lt;ÂÄºÁ±ªÂûã&gt; &lt;ÂÄº&gt;‚Äô 1234# ÂÖàÊ∑ªÂä†keyÂÄºPlistBuddy -c 'Add :Person dict' info.plist# Ê∑ªÂä†valueÂÄºPlistBuddy -c 'Add :Person:Name string yans67' info.plist ÂêàÂπ∂ A Ëá≥ BPlistBuddy -c ‚ÄòMerge ‚Äò B ‰∏é A ÈáçÂ§çÁöÑÂ≠óÊÆµÔºå‰ºöÂèñ B ÁöÑÂÄºÔºåÂç≥‰∏çÊõøÊç¢ÔºåÂè™Â¢ûÂä†Êñ∞Â≠óÊÆµ„ÄÇ 1PlistBuddy -c 'Merge A.plist' B.plist]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Ëá™Âä®Âåñ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÈôêÂà∂Ëß¶Êë∏ËåÉÂõ¥]]></title>
    <url>%2FiOS%2F%E9%99%90%E5%88%B6%E8%A7%A6%E6%91%B8%E8%8C%83%E5%9B%B4%2F</url>
    <content type="text"><![CDATA[ÂºÄÂèë‰∏≠ÁªèÂ∏∏ÈÅáÂà∞ÊâãÂäøÊìç‰ΩúÁöÑÂºÄÂèëÔºå‰∏∫‰∫ÜËÆ©Á°Æ‰øùÁî®Êà∑ËÉΩÂ§üËß¶Êë∏ÔºåÈÇ£Â∞±Â∞ë‰∏ç‰∫ÜÈôêÂà∂Ëß¶Êë∏ËåÉÂõ¥„ÄÇ ‰ª•‰∏ãÊñπÊ≥ïÂèØÁî®‰∫éÂà§Êñ≠Êéß‰ª∂ÊòØÂê¶Ë∂ÖÂá∫Áà∂ËßÜÂõæ„ÄÇÁÑ∂ËÄåÂú®ÂÆûÈôÖ‰ΩøÁî®‰∏≠ÔºåËøôÊ†∑ÁöÑÂà§Êñ≠Âπ∂Ê≤°ÊúâÂ§öÂ§ßÁöÑÊÑè‰πâ„ÄÇ 12345678910- (BOOL)shouldStopResponseGesture:(UIGestureRecognizer *)sender &#123; //CGPoint location = [sender locationInView:self.superview]; //CGRectContainsPoint(sender.view.superview.bounds, location) //return NO; CGFloat delta = 44; CGRect previewInsetFrame = CGRectInset(self.previewFrame, delta, delta); BOOL shouldStopResponseGesture = !CGRectIntersectsRect(self.superview.bounds, previewInsetFrame); NSLog(@"should: %s", shouldStopResponseGesture?"YES":"NO"); return shouldStopResponseGesture;&#125; ÊúÄÁªàÊØîËæÉÈù†Ë∞±ÁöÑËøòÊòØÁõ¥Êé•ÊéßÂà∂Êéß‰ª∂ÁöÑ center ÂÄº„ÄÇÊï¥‰∏™Êéß‰ª∂‰∏çÂÖÅËÆ∏Ë∂ÖÂá∫Áà∂ËßÜÂõæ: 123456CGPoint newCenter = CGPointMake(sender.view.center.x + translation.x, sender.view.center.y + translation.y);newCenter.y = MAX(sender.view.frame.size.height/2, newCenter.y);newCenter.y = MIN(sender.view.superview.frame.size.height - sender.view.frame.size.height/2, newCenter.y);newCenter.x = MAX(sender.view.frame.size.width/2, newCenter.x);newCenter.x = MIN(sender.view.superview.frame.size.width - sender.view.frame.size.width/2,newCenter.x); Âä†‰∏™ 44 pt ÁöÑÂÜÖËæπË∑ùÔºö 12345678910111213- (void)fixInsideView:(UIView *)view &#123; CGPoint newCenter = view.center; CGFloat viewWidth = CGRectGetWidth(view.bounds); CGFloat viewHeight = CGRectGetHeight(view.bounds); CGFloat superWidth = CGRectGetWidth(view.superview.bounds); CGFloat superHeight = CGRectGetHeight(view.superview.bounds); CGFloat delta = 44; newCenter.y = MAX(delta - viewHeight/2, newCenter.y); newCenter.y = MIN(superHeight + viewHeight/2 - delta, newCenter.y); newCenter.x = MAX(delta - viewWidth/2, newCenter.x); newCenter.x = MIN(superWidth + viewWidth/2 - delta, newCenter.x); view.center = newCenter;&#125; Âä†‰∫Ü‰∏™ {10, 10} ‰∏≠ÁÇπÂÅèÁßªÔºö 123456789101112131415161718- (void)fixInsideView:(UIView *)view &#123; CGPoint newCenter = view.center; CGFloat viewWidth = CGRectGetWidth(view.bounds); CGFloat viewHeight = CGRectGetHeight(view.bounds); CGFloat superWidth = CGRectGetWidth(view.superview.bounds); CGFloat superHeight = CGRectGetHeight(view.superview.bounds); CGFloat delta = 44; CGFloat offset = 10; // ‰∏çËÉΩ‰ª•ËøôÊ†∑ÁöÑÊñπÂºèÂÆûÁé∞ÂÅèÁßª //newCenter.x += offset/2; //newCenter.y += offset/2; //newCenter = CGPointMake(newCenter.x + offset/2, newCenter.y + offset/2); newCenter.y = MAX(delta - viewHeight/2, newCenter.y); newCenter.y = MIN(superHeight + viewHeight/2 - delta - offset, newCenter.y); newCenter.x = MAX(delta - viewWidth/2, newCenter.x); newCenter.x = MIN(superWidth + viewWidth/2 - delta - offset, newCenter.x); view.center = newCenter;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Êó∂Èó¥Êà≥]]></title>
    <url>%2FiOS%2F%E6%97%B6%E9%97%B4%E6%88%B3%2F</url>
    <content type="text"><![CDATA[ÂØπÂêéÂè∞ËØ∑Ê±ÇÂèÇÊï∞ÊúÄÂ∏∏Áî®Âà∞ÁöÑÊó∂Èó¥Êà≥ÔºåÁÆÄÂçïÂú∞Â∞ÅË£Ö‰∫Ü‰∏™ÂáΩÊï∞„ÄÇ 12345/// Êó∂Èó¥Êà≥NSString *TimeStampString() &#123; long timeStamp = [NSDate date].timeIntervalSince1970 * 1000; return @(timeStamp).description;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÈÄöËøáÂçÅÂÖ≠ËøõÂà∂ÂàõÂª∫ UIColor]]></title>
    <url>%2FiOS%2F%E9%80%9A%E8%BF%87%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E5%88%9B%E5%BB%BA%20UIColor%2F</url>
    <content type="text"><![CDATA[ÂºÄÂèë‰∏≠‰ΩøÁî® UI Êèê‰æõÁöÑÈ¢úËâ≤ÂÄºÔºåËé´Ëøá‰∫éÁõ¥Êé•‰ΩøÁî®ÂçÅÂÖ≠ËøõÂà∂È¢úËâ≤ÂÄº„ÄÇËãπÊûúÂ±ÖÁÑ∂‰∏çÊèê‰æõËøôÊ†∑ÁöÑÊñπÊ≥ïÔºåÈÇ£Â∞±Â∞ÅË£Ö‰∏Ä‰∏™Âëó~ ‰∏∫ UIColor ÂàõÂª∫ÈÄöËøáÂçÅÂÖ≠ËøõÂà∂È¢úËâ≤ÂÄºÂàõÂª∫ UIColor È¢úËâ≤ÁöÑÂàÜÁ±ªÔºö 12345678910+ (UIColor *)colorWithHex:(int)hexValue alpha:(CGFloat)alpha&#123; return [UIColor colorWithRed:((float)((hexValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((hexValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(hexValue &amp; 0xFF))/255.0 alpha:alpha];&#125;+ (UIColor *)colorWithHex:(int)hexValue&#123; return [UIColor colorWithHex:hexValue alpha:1.0];&#125; üéÅÂΩ©Ëõã ÂØπ‰∫éÂàõÂª∫ÁÅ∞Â∫¶È¢úËâ≤ÔºåËãπÊûúÊèê‰æõ‰∫Ü‰∏Ä‰∏™Ë∂Ö‰æøÂà©ÁöÑÊñπÊ≥ï„ÄÇ + (UIColor *)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha param description white The grayscale value of the color object, specified as a value from 0.0 to 1.0. alpha The opacity value of the color object, specified as a value from 0.0 to 1.0.]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Êó∂Èó¥ÊòæÁ§∫]]></title>
    <url>%2FiOS%2F%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[ÂØπ‰∫éÈÅáÂà∞ÊòæÁ§∫Êó∂Èó¥Ôºå‰ª•ÂæÄÈÉΩ‰ºö‰ΩøÁî®‰ª•‰∏ãÁöÑÊñπÂºèÁîüÊàêÂ≠óÁ¨¶‰∏≤„ÄÇ 123456NSString *TimeStringWithSeconds(NSTimeInterval time) &#123; if (isnan(time)) return nil; NSInteger minutes = (time / 60) % 60; NSInteger seconds = time % 60; return [NSString stringWithFormat:@"%02i:%02i", minutes, seconds];&#125; Êúâ‰∏ÄÂ§©ÔºåÂèëÁé∞ËãπÊûúÊúâ‰∏ÄÂ•óÊó∂Èó¥Ê†ºÂºèÂåñÁöÑ‰æøÂà©ÊñπÊ≥ïÔºåÊûÅÂÖ∂ÁÆÄ‰ªã‰æøÂà©ÁöÑËß£ÂÜ≥‰∏äËø∞ÈóÆÈ¢ò„ÄÇ 1234567/// second -&gt; NSStringNSString *NSStringFromInterval(NSTimeInterval interval) &#123; if (isnan(interval)) return nil; NSDateComponentsFormatter *formatter = [[NSDateComponentsFormatter alloc] init]; NSString *outputString = [formatter stringFromTimeInterval:interval]; return outputString;&#125; üéÅÂΩ©Ëõã ÁªèËøáÊµãËØïÔºåNSDateComponentsFormatter ‰ºº‰πéÁî®ÈªòËÆ§ÁöÑÈÖçÁΩÆÊòØÊúÄÁ¨¶ÂêàÊàëÁöÑÈúÄÊ±ÇÁöÑÔºåÂÖ∂‰ªñÁöÑÈÉΩÊØîËæÉÂ∞è‰ºó„ÄÇ„ÄÇ Á±ª‰ººÂú∞ÔºåËãπÊûúÂºÄÊèê‰æõ‰∫Ü‰ª•‰∏ãÁöÑÊ†ºÂºèÂåñÂ∑•ÂÖ∑Ôºö NSFormatter CNContactFormatter CNPostalAddressFormatter MKDistanceFormatter NSByteCountFormatter NSDateComponentsFormatter NSDateFormatter NSDateIntervalFormatter NSEnergyFormatter NSLengthFormatter NSMassFormatter NSNumberFormatter NSPersonNameComponentsFormatter Êó•ÂêéÊúâÊó∂Èó¥ÔºåÂÜçËØ¶ÁªÜÁ†îÁ©∂ÊØè‰∏ÄÁßçÊ†ºÂºèÂåñÂ∑•ÂÖ∑„ÄÇ]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ëé∑Âèñ UIView ÁöÑ UIViewController]]></title>
    <url>%2FiOS%2F%E8%8E%B7%E5%8F%96%20UIView%20%E7%9A%84%20UIViewController%2F</url>
    <content type="text"><![CDATA[Âú®Ëá™Â∑±Â∞ÅË£ÖÊéß‰ª∂Êó∂ÔºåÊúâÊó∂ÈúÄË¶ÅËé∑ÂèñËØ•Êéß‰ª∂ÔºàUIViewÔºâÊâÄÂú®ÁöÑËßÜÂõæÊéßÂà∂Âô®ÔºàUIViewControllerÔºâÔºåÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÊñπÂºèËé∑Âæó„ÄÇ ÈÄöËøá‰∏∫ UIView Ê∑ªÂä†ÂàÜÁ±ªÂÆûÁé∞Ôºö 123456789101112/// Ëé∑ÂèñÊâÄÂú®ÁöÑËßÜÂõæÊéßÂà∂Âô®- (UIViewController *)viewController &#123; /// Finds the view's view controller. // Traverse responder chain. Return first found view controller, which will be the view's view controller. UIResponder *responder = self; while ((responder = [responder nextResponder])) if ([responder isKindOfClass: [UIViewController class]]) return (UIViewController *)responder; // If the view controller isn't found, return nil. return nil;&#125; üéÅÂΩ©Ëõã 12345678/// ËøîÂõûÊâÄÂú®ÁöÑÂØºËà™ÊéßÂà∂Âô®- (UINavigationController *)navigationController &#123; UIResponder *responder = self; while ((responder = [responder nextResponder])) if ([responder isKindOfClass: [UINavigationController class]]) return (UINavigationController *)responder; return nil;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[‰∏≠Êñá‰π±Á†ÅÈóÆÈ¢ò]]></title>
    <url>%2FwebPlus%2F%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[‰øÆÂ§ç hexo Âª∫Á´ôËøáÁ®ã‰∏≠ËØ≠Ë®ÄÊòæÁ§∫‰∏çÊ≠£Á°ÆÈóÆÈ¢ò„ÄÇ ËÆæÁΩÆÁºñÁ†ÅËØ≠Ë®Ä‰∏∫ zh-CN 1language: zh-CN ‰ΩÜÊ≥®ÊÑèÔºåÂΩì‰ΩøÁî® NexT ‰∏ªÈ¢òÊó∂ÔºåÈúÄËÆæÁΩÆ‰∏∫ zh-Hans ÊâçÊ≠£Â∏∏Â±ïÁ§∫‰∏≠Êñá„ÄÇ Â∞ÜÂçöÂÆ¢Êñá‰ª∂‰øùÂ≠ò‰∏∫UTF-8Âç≥ÂèØËß£ÂÜ≥ÈóÆÈ¢ò„ÄÇÊñπÊ≥ïÔºö Â∞ÜÂçöÂÆ¢Êñá‰ª∂‰øùÂ≠ò‰∏∫UTF-8Ôºõ hexo d -gÔºõ]]></content>
      <categories>
        <category>Âª∫Á´ô</category>
      </categories>
      <tags>
        <tag>Âª∫Á´ô</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo ÈÖçÁΩÆ]]></title>
    <url>%2FwebPlus%2Fhexo%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[ÂéüÊñá Á´ôÁÇπÈÖçÁΩÆÔºåÊìç‰Ωú _config.yml Êñá‰ª∂Ôºå‰∏ãÈù¢ÂºÄÂßãËøõË°åÂàÜÊÆµËØ¶ÁªÜÁöÑËØ¥Êòé„ÄÇ 1&gt; Á´ôÁÇπÈÖçÁΩÆ1234567# Sitetitle: Â∞èÂ≠¶ÂæíVÁöÑÊàêÈïøÂéÜÁ®ã # ÁΩëÁ´ôÊ†áÈ¢òsubtitle: ÊåëÊàò‰∫∫ÁîüÊó†ÊûÅÈôêÔºåÊîÄÁôª‰∫∫ÁîüÊõ¥È´òÂ≥∞ # ÁΩëÁ´ôÂ≠êÊ†áÈ¢òdescription: ËøôÊòØ‰∏Ä‰∏™Âà©Áî®HexoÊê≠Âª∫ÁöÑÂçöÂÆ¢ # ÁΩëÁ´ôÊèèËø∞author: Â∞èÂ≠¶ÂæíV # ÁΩëÁ´ô‰ΩúËÄÖÔºå‰πüÂ∞±ÊòØÊÇ®ÁöÑÂêçÂ≠ólanguage: zh-cn # ÁΩëÁ´ô‰ΩøÁî®ÁöÑËØ≠Ë®Ä timezone: # ÁΩëÁ´ôÊó∂Âå∫„ÄÇHexo È¢ÑËÆæ‰ΩøÁî®ÊÇ®ÁîµËÑëÁöÑÊó∂Âå∫„ÄÇ 2&gt; ÁΩëÂùÄÈÖçÁΩÆËøô‰∏™Âú∞Êñπ‰∏ÄËà¨Ê†πÊçÆÊÉÖÂÜµ‰øÆÊîπ url Âíå root Âç≥ÂèØ„ÄÇ 12345# URLurl: http://xiaoxuetu.github.io # ÂçöÂÆ¢ÁΩëÂùÄroot: / # ÁΩëÁ´ôÊ†πÁõÆÂΩïpermalink: :year/:month/:day/:title/ # ÊñáÁ´†ÁöÑÊ∞∏‰πÖÈìæÊé•Ê†ºÂºè :year/:month/:day/:title/permalink_defaults: # Ê∞∏‰πÖÈìæÊé•‰∏≠ÂêÑÈÉ®ÂàÜÁöÑÈªòËÆ§ÂÄº Ê≥®ÊÑèÔºÅ Â¶ÇÊûú‰Ω†ÁöÑÁΩëÁ´ôÂ≠òÊîæÂú®Â≠êÁõÆÂΩï‰∏≠Ôºå‰æãÂ¶Ç http://xiaoxuetu.github.io/blog, ÂàôÂ∞ÜurlËÆæ‰∏∫http://xiaoxuetu.github.io/blogÔºå Âπ∂‰∏îÊää root ËÆæ‰∏∫/blog/„ÄÇ 3&gt; ÁõÆÂΩïÈÖçÁΩÆËøô‰∏™Âú∞Êñπ‰∏ÄËà¨Áõ¥Êé•ÂèñÈªòËÆ§ÂÄº‰∏çÁî®‰øÆÊîπ„ÄÇ 123456789# Directorysource_dir: source # ËµÑÊ∫êÊñá‰ª∂Â§πÔºåËøô‰∏™Êñá‰ª∂Â§πÁî®Êù•Â≠òÊîæÂÜÖÂÆπÔºå‰æãÂ¶ÇÊàë‰ª¨Áî®markdownÁºñÂÜôÁöÑÂçöÊñápublic_dir: public # ÂÖ¨ÂÖ±Êñá‰ª∂Â§πÔºåËøô‰∏™Êñá‰ª∂Â§πÁî®‰∫éÂ≠òÊîæÁîüÊàêÁöÑÈùôÊÄÅÂçöÂÆ¢Êñá‰ª∂„ÄÇtag_dir: tags # Ê†áÁ≠æÊñá‰ª∂Â§πarchive_dir: archives # ÂΩíÊ°£Êñá‰ª∂Â§πcategory_dir: categories # ÂàÜÁ±ªÊñá‰ª∂Â§πcode_dir: downloads/code # Include code Êñá‰ª∂Â§πi18n_dir: :lang # ÂõΩÈôÖÂåñÔºài18nÔºâÊñá‰ª∂Â§πskip_render: # Ë∑≥ËøáÊåáÂÆöÊñá‰ª∂ÁöÑÊ∏≤ÊüìÔºåÊÇ®ÂèØ‰ΩøÁî® glob Êù•ÈÖçÁΩÆË∑ØÂæÑ„ÄÇ 4&gt; ÊñáÁ´†ÈÖçÁΩÆËøô‰∏™Âú∞Êñπ‰∏ÄËà¨Áõ¥Êé•ÂèñÈªòËÆ§ÂÄº‰∏çÁî®‰øÆÊîπ„ÄÇ 123456789101112131415# Writingnew_post_name: :title.md # Êñ∞ÊñáÁ´†ÁöÑÊñá‰ª∂ÂêçÁß∞default_layout: post # È¢ÑËÆæÂ∏ÉÂ±Ätitlecase: false # ÊääÊ†áÈ¢òËΩ¨Êç¢‰∏∫ titlecaseÔºàtitlecaseÊåáÁöÑÊòØÂ∞ÜÊØè‰∏™ÂçïËØçÈ¶ñÂ≠óÊØçËΩ¨Êç¢ÊàêÂ§ßÂÜôÔºâexternal_link: true # Âú®Êñ∞Ê†áÁ≠æ‰∏≠ÊâìÂºÄÈìæÊé•filename_case: 0 # ÊääÊñá‰ª∂ÂêçÁß∞ËΩ¨Êç¢‰∏∫ (1) Â∞èÂÜôÊàñ (2) Â§ßÂÜô, 0Ë°®Á§∫‰∏çÂèòrender_drafts: false # ÊòæÁ§∫ËçâÁ®øpost_asset_folder: false # ÂêØÂä® Asset Êñá‰ª∂Â§πrelative_link: false # ÊääÈìæÊé•Êîπ‰∏∫‰∏éÊ†πÁõÆÂΩïÁöÑÁõ∏ÂØπ‰ΩçÂùÄfuture: true # ÊòæÁ§∫Êú™Êù•ÁöÑÊñáÁ´†highlight: # ‰ª£Á†ÅÂùóÁöÑËÆæÁΩÆ enable: true line_number: true # ÊòØÂê¶ÊòæÁ§∫Ë°åÂè∑ auto_detect: true # ÊòØÂê¶Ëá™Âä®ÁõëÊµã tab_replace: # Â∞Ü tab ÊõøÊç¢ÊàêÂÖ∂‰ªñÂ≠óÁ¨¶‰∏≤ 5&gt; ÂàÜÁ±ªÂíåÊ†áÁ≠æÈÖçÁΩÆËøô‰∏™Âú∞Êñπ‰∏ÄËà¨Áõ¥Êé•ÂèñÈªòËÆ§ÂÄº‰∏çÁî®‰øÆÊîπ„ÄÇ 1234# Category &amp; Tagdefault_category: uncategorized # ÈªòËÆ§ÂàÜÁ±ª, uncategorizedË°®Á§∫Êú™ÂàÜÁ±ªcategory_map: # ÂàÜÁ±ªÂà´Âêçtag_map: # Ê†áÁ≠æÂà´Âêç 6&gt; Êó•Êúü ‰ª•Âèä Êó∂Èó¥Ê†ºÂºè ÈÖçÁΩÆHexo ‰ΩøÁî® Moment.js Êù•Ëß£ÊûêÂíåÁé∞ÂÆûÊó∂Èó¥Ôºå‰∏ÄËà¨Êàë‰ª¨Áõ¥Êé•ÂèñÈªòËÆ§ÂÄº‰∏çÁî®‰øÆÊîπ„ÄÇÂ¶ÇÊûú‰Ω†ÊÉ≥‰øÆÊîπÁöÑËØùÔºåÂèØ‰ª•ÊåâÁÖß http://momentjs.com/docs/#/displaying/format/ ‰∏≠ÂÆö‰πâÁöÑÊ†ºÂºèËøõË°å‰øÆÊîπ„ÄÇ 12date_format: YYYY-MM-DD # Êó•ÊúüÊ†ºÂºètime_format: HH:mm:ss # Êó∂Èó¥Ê†ºÂºè 7&gt; ÂàÜÈ°µÈÖçÁΩÆËøô‰∏™Âú∞Êñπ‰∏ÄËà¨Ê†πÊçÆËá™Â∑±ÁöÑÈúÄÊ±Ç‰øÆÊîπ per_page ËÆæÁΩÆÊØèÈ°µÊòæÁ§∫ÁöÑÊñáÁ´†Êï∞ÈáèÂç≥ÂèØ„ÄÇ 123# Paginationper_page: 10 # ÊØèÈ°µÊòæÁ§∫ÁöÑÊñáÁ´†ÈáèÔºåÂ¶ÇÊûúËÆæÁΩÆÂÄº‰∏∫0ÔºåÂàôË°®Á§∫Á¶ÅÊ≠¢ÂàÜÈáépagination_dir: page # ÂàÜÈ°µÁõÆÂΩï 8&gt; ‰∏ªÈ¢òÈÖçÁΩÆ‰∏ÄËà¨‰ªéËøôÈáåÂºÄÂßãÔºåÈÉΩÊòØÂ±û‰∫éHexoÊãìÂ±ïÊèí‰ª∂ÁöÑÈÖçÁΩÆ‰∫ÜÔºå‰∏ãÈù¢ËøôÊÆµÊòØÈÖçÁΩÆÊàë‰ª¨ÂçöÂÆ¢ÊâÄË¶Å‰ΩøÁî®ÁöÑ‰∏ªÈ¢òÂêçÂ≠óÔºåÊÉ≥Ë¶ÅËé∑ÂèñÊõ¥Â§öÁöÑ‰∏ªÈ¢òÔºåÂèØ‰ª•ÂèÇËÄÉÔºöhttp://hexo.io/themes/ 12# Extensionstheme: landscape # ‰∏ªÈ¢òËÆæÁΩÆÔºåÈªòËÆ§ÊòØ landscape 9&gt; ÈÉ®ÁΩ≤ÈÖçÁΩÆËøô‰∏ÄÂùóÊ∂âÂèäÂà∞ÂçöÂÆ¢ÂèëÂ∏ÉÔºåÂ∞ÜÂú®‰∏ã‰∏ÄÁØáÂçöÊñá‰∏≠Áªü‰∏ÄËøõË°åËÆ≤Ëß£ÔºåËøôÈáåÂèØ‰ª•ÂÖà‰∏çÁî®‰øÆÊîπÈÖçÁΩÆ 123# Deploymentdeploy: type: # ËÆæÁΩÆÂèëÂ∏ÉÁ±ªÂûãÔºåÂ¶ÇgitÔºårsync 2.2 ‰∏ªÈ¢òËÆæÁΩÆËøô‰∏™ÂÖ∂ÂÆûÂ∞±ÊòØ themes/{‰∏ªÈ¢òÂêçÁß∞}/_config.yml Êñá‰ª∂‰∫ÜÔºå‰∏ªË¶ÅÊòØÁΩëÁ´ô‰∏ªÈ¢òÁöÑ‰∏Ä‰∫õÈÖçÁΩÆÔºåÂ¶ÇÈúÄË¶ÅÊòæÁ§∫ÁöÑËèúÂçï„ÄÅÂºÄÂêØÁöÑÁªÑ‰ª∂Á≠âÁ≠â„ÄÇ ‰∏çÂêåÁöÑ‰∏ªÈ¢òÔºåÈÉΩ‰ºöÂ¢ûÂä†‰∫ÜËá™Â∑±ÁöÑ‰∏Ä‰∫õÁâπÂà´ÂºÄÂÖ≥Ôºå‰∏ãÈù¢Âè™‰ª•ÈªòËÆ§‰∏ªÈ¢ò‰∏∫‰æãËøõË°åËÆ≤Ëß£„ÄÇ 1&gt; ËèúÂçïÈÖçÁΩÆ ËøôÈáå‰∏ªË¶ÅÊòØÂØπÂçöÂÆ¢ÊòæÁ§∫ÁöÑËèúÂçïÈ°πÁöÑËÆøÈóÆË∑ØÂæÑËøõË°åÈÖçÁΩÆÔºå 12345# Headermenu: # ËèúÂçïÈ°πÁöÑÁõ∏ÂÖ≥ÈÖçÁΩÆ Home: / # ÈÖçÁΩÆÂçöÂÆ¢ÁöÑ‰∏ªÈ°µË∑ØÂæÑ Archives: /archives # ÈÖçÁΩÆÂçöÂÆ¢ÁöÑÂΩíÊ°£Ë∑ØÂæÑrss: /atom.xml # ÈÖçÁΩÆÂçöÂÆ¢ÁöÑRSSËÆ¢ÈòÖË∑ØÂæÑ 2&gt; ÊòæÁ§∫ÂÜÖÂÆπÈÖçÁΩÆ ËøôÈáå‰∏ªË¶ÅÂØπÂçöÂÆ¢ÊòæÁ§∫ÁöÑÂÜÖÂÆπËøõË°åËÆæÁΩÆÔºåÊØîÂ¶ÇÊü•ÁúãÂÖ®ÊñáÁöÑÊåâÈíÆÊñáÊú¨ÊòæÁ§∫„ÄÇ 123# Contentexcerpt_link: ÈòÖËØªÂÖ®Êñá # ËÆæÁΩÆÊü•ÁúãÂÖ®ÊñáÁöÑÊåâÈíÆÊòæÁ§∫ÊñáÊú¨fancybox: true # ÊòØÂê¶ÂºÄÂêØÂºπÂá∫Â±ÇÊïàÊûú 3&gt; ‰æßËæπÊ†èÈÖçÁΩÆ ‰∏ªË¶ÅÊòØÂØπ‰æßËæπÊ†èÂ±ïÁé∞ËøõË°åËÆæÁΩÆ„ÄÇ 12345678# Sidebarsidebar: right # ‰æßËæπÊ†èÂ±ïÁ§∫ÁöÑÊñπÂêëwidgets: # ‰æßËæπÊ†èÊ∑ªÂä†ÁöÑÁªÑ‰ª∂ÈÖçÁΩÆ- category # ÊòæÁ§∫ÂàÜÁ±ª- tag # ÊòæÁ§∫Ê†áÁ≠æ- tagcloud # ÊòæÁ§∫Ê†áÁ≠æ‰∫ë- archive # ÊòæÁ§∫ÂΩíÊ°£- recent_posts # ÊòæÁ§∫ÊúÄËøëÂèëÂ∏É 4&gt; ÂÖ∂‰ªñÈÖçÁΩÆ Á¨¨1ÁÇπ Âíå Á¨¨2ÁÇπ ÈÉΩÊòØÂ§ßÈÉ®ÂàÜ‰∏ªÈ¢òÈÄöÁî®ÁöÑÈÖçÁΩÆÔºå‰∏ãÈù¢Ëøô‰∫õÂ∞±ÊòØÊØîËæÉÂÆöÂà∂ÂåñÁöÑ‰∫Ü„ÄÇÈô§‰∫Ü‰∏ãÈù¢ÂàóÂá∫ÁöÑÔºåÂõΩÂÜÖÂ§ßÈÉ®ÂàÜ‰∏ªÈ¢òÈÉΩËøò‰ºöÊ∑ªÂä†‰∫ÜÁôæÂ∫¶ÁªüËÆ°ÁöÑIDÈÖçÁΩÆ„ÄÅÂ§öËØ¥ÁöÑIDÈÖçÁΩÆ„ÄÅJiathisÂàÜ‰∫´Ê¥ªÁùÄÁôæÂ∫¶ÂàÜ‰∫´ÁöÑÈÖçÁΩÆÁ≠âÁ≠â„ÄÇ ÂÖ∑‰ΩìÊàë‰ª¨‰æùÊóßÊòØÂè™ËÆ≤Ëß£ÈªòËÆ§‰∏ªÈ¢òÈáåÈù¢ÁöÑ„ÄÇ 1234567# Miscellaneousgoogle_analytics: "UA-********-1" # Ë∞∑Ê≠åÁªüËÆ°ÁöÑIDÈÖçÁΩÆÔºåÂ¶ÇÊûú‰Ω†Ê≤°ÊúâÁî®Âà∞ÔºåÂèØ‰ª•‰∏∫Á©∫favicon: /favicon.png # ÁΩëÁ´ôÂõæÊ†áË∑ØÂæÑtwitter: # twitterÈÖçÁΩÆgoogle_plus: # google plus ÈÖçÁΩÆfb_admins: # facebook ÈÖçÁΩÆfb_app_id: Ëá≥Ê≠§ÔºåÊàë‰ª¨ÂçöÂÆ¢ÁöÑ HexoÈÖçÁΩÆ Âíå ‰∏ªÈ¢òÈÖçÁΩÆ ÈÉΩÂÆåÊàê‰∫Ü„ÄÇ]]></content>
      <categories>
        <category>Âª∫Á´ô</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGContext Êìç‰Ωú]]></title>
    <url>%2FiOS%2FCGContext%20%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[‰∏ãÈù¢ÁªôÂá∫Âá†Áßç CGContext Â∏∏Áî®ÁöÑÊìç‰Ωú„ÄÇ 1234567// ÊóãËΩ¨CGContextTranslateCTM(context, width, height);CGContextConcatCTM(context, CGAffineTransformMakeRotation(M_PI));// ‰∏ä‰∏ãÁøªËΩ¨CGContextTranslateCTM(context, 0, height);CGContextScaleCTM(context, 1.0, -1.0);]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>CoreGraphics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Êâ©Â±ïÂêçÁ±ªÂûãÂà§Êñ≠]]></title>
    <url>%2FiOS%2F%E6%89%A9%E5%B1%95%E5%90%8D%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%2F</url>
    <content type="text"><![CDATA[Âú®Êàë‰ª¨‰ΩøÁî®Êìç‰ΩúÁ≥ªÁªüÔºåÁ≥ªÁªüÈÄöÂ∏∏ÂèØ‰ª•Ê†πÊçÆÊñá‰ª∂Êâ©Â±ïÂêç/ÂêéÁºÄÔºåÊù•Âà§Êñ≠Êñá‰ª∂Á±ªÂûãÔºåÂπ∂ÊòæÁ§∫Áõ∏Â∫îÂõæÊ†á„ÄÇÈÇ£‰πàÔºåiOS ‰∏≠ÂèØ‰ª•ÊÄéÊ†∑ÂÆûÁé∞Âë¢Ôºü iOS ÂèØ‰ª•ÈÄöËøá UTI Êù•ËøõË°åËΩ¨Êç¢„ÄÇUTI ÊòØ‰ªÄ‰πàÂë¢ÔºåÁî®Ëøá Media Áõ∏ÂÖ≥ÁöÑÊ°ÜÊû∂ÁöÑÂêåÂ≠¶ÂèØËÉΩ‰∏ç‰ºöÈôåÁîü„ÄÇÈúÄË¶Å‰∫ÜËß£ÁöÑÂêåÂ≠¶ÔºåÂèØÊµèËßà‰ª•‰∏ãËµÑÊñôÔºö Uniform Type Identifier Concepts Uniform Type Identifier ÂÖ∑‰ΩìÂÆûÁé∞‰ª£Á†ÅÂ¶Ç‰∏ãÔºö 12345678910111213141516171819202122/// extension -&gt; UTINSString *UTIForExtension(NSString *extension) &#123; //Request the UTI via the file extension NSString *theUTI = (__bridge_transfer NSString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (__bridge CFStringRef)(extension), NULL); return theUTI;&#125;/// ÂåπÈÖç UTIBOOL extensionConformToUTI(NSString *extension, CFStringRef theUTI) &#123; NSString *preferredUTI = UTIForExtension(extension); return (UTTypeConformsTo((__bridge CFStringRef) preferredUTI, theUTI));&#125;BOOL extensionLikelyImage(NSString *extension) &#123; return extensionConformToUTI(extension, CFSTR("public.image"));&#125;BOOL extensionLikelyAudio(NSString *extension) &#123; return extensionConformToUTI(extension, CFSTR("public.audio"));&#125;BOOL extensionLikelyMovie(NSString *extension) &#123; return extensionConformToUTI(extension, CFSTR("public.movie"));&#125; üéÅÂΩ©Ëõã È°∫‰æøÁöÑÔºåÁªôÂá∫ UTI ‰∏é mimeType ÁöÑËΩ¨Êç¢Ôºå‰ª•ÂèäÁõ∏ÂÖ≥ÁöÑÂÆûÁî®ÂáΩÊï∞„ÄÇ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980/// UTI -&gt; mimeTypeNSString *mimeTypeForUTI(NSString *aUTI) &#123; CFStringRef theUTI = (__bridge CFStringRef) aUTI; CFStringRef mimeType = UTTypeCopyPreferredTagWithClass(theUTI, kUTTagClassMIMEType); return (__bridge_transfer NSString *)mimeType;&#125;/// ÂÖÉÁ¥†ÂîØ‰∏ÄÂ≠óÂÖ∏NSArray *uniqueArray(NSArray *anArray) &#123; NSMutableArray *copiedArray = [NSMutableArray arrayWithArray:anArray]; for (id object in anArray) &#123; [copiedArray removeObjectIdenticalTo:object]; [copiedArray addObject:object]; &#125; return copiedArray;&#125;NSArray *conformanceArray(NSString *aUTI) &#123; NSMutableArray *results = [NSMutableArray arrayWithObject:aUTI]; NSDictionary *dictionary = utiDictionary(aUTI); id conforms = dictionary[(__bridge NSString *)kUTTypeConformsToKey]; // No conformance if (!conforms) return results; // Single conformance if ([conforms isKindOfClass:[NSString class]]) &#123; [results addObjectsFromArray:conformanceArray(conforms)]; return uniqueArray(results); &#125; // Iterate through multiple conformance if ([conforms isKindOfClass:[NSArray class]]) &#123; for (NSString *eachUTI in (NSArray *) conforms) [results addObjectsFromArray:conformanceArray(eachUTI)]; return uniqueArray(results); &#125; // Just return the one-item array return results;&#125;NSArray *allExtensions(NSString *aUTI) &#123; NSMutableArray *results = [NSMutableArray array]; NSArray *conformance = conformanceArray(aUTI); for (NSString *eachUTI in conformance) &#123; NSDictionary *dictionary = utiDictionary(eachUTI); NSDictionary *extensions = dictionary[(__bridge NSString *)kUTTypeTagSpecificationKey]; id fileTypes = extensions[(__bridge NSString *)kUTTagClassFilenameExtension]; if ([fileTypes isKindOfClass:[NSArray class]]) [results addObjectsFromArray:(NSArray *) fileTypes]; else if ([fileTypes isKindOfClass:[NSString class]]) [results addObject:(NSString *) fileTypes]; &#125; return uniqueArray(results);&#125;NSArray *allMIMETypes(NSString *aUTI) &#123; NSMutableArray *results = [NSMutableArray array]; NSArray *conformance = conformanceArray(aUTI); for (NSString *eachUTI in conformance) &#123; NSDictionary *dictionary = utiDictionary(eachUTI); NSDictionary *extensions = dictionary[(__bridge NSString *)kUTTypeTagSpecificationKey]; id fileTypes = extensions[(__bridge NSString *)kUTTagClassMIMEType]; if ([fileTypes isKindOfClass:[NSArray class]]) [results addObjectsFromArray:(NSArray *) fileTypes]; else if ([fileTypes isKindOfClass:[NSString class]]) [results addObject:(NSString *) fileTypes]; &#125; return uniqueArray(results);&#125;NSDictionary *utiDictionary(NSString *aUTI) &#123; NSDictionary *dictionary = (__bridge_transfer NSDictionary *)UTTypeCopyDeclaration((__bridge CFStringRef) aUTI); return dictionary;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ë¥¥ËæπÁº©ÊîæÂ∞∫ÂØ∏]]></title>
    <url>%2FiOS%2F%E8%B4%B4%E8%BE%B9%E7%BC%A9%E6%94%BE%E5%B0%BA%E5%AF%B8%2F</url>
    <content type="text"><![CDATA[Ë¥¥ËæπÁº©ÊîæÔºåÊåáÁöÑÊòØÁà∂Â≠êËßÜÂõæ‰∏≠ÔºåÂ≠êËßÜÂõæ‰øùÊåÅÂÆΩÈ´ò‰∏çÂèòÔºåÂ≠êËßÜÂõæÈïøËæπÊàñÂÆΩËæπÁ¥ßË¥¥Áà∂ËßÜÂõæÁà∂ÂÜÖËæπÊàñÊåáÂÆöÁöÑÂÆΩÈ´ò„ÄÇ ‰∏ãÈù¢ÊèêÂá∫ËøôÁßçÁÆóÊ≥ïÊòØÂÆûÁé∞ÊñπÂºè„ÄÇ 12345678910- (CGSize)size:(CGSize)size fitInSize:(CGSize)inSize &#123; if (!size.height || !size.width) &#123; return CGSizeZero; &#125; CGFloat width = inSize.width; CGFloat height = size.height / size.width * width; height = fmin(height, inSize.height); width = size.width / size.height * height; return CGSizeMake(width, height);&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ëé∑ÂèñÊåáÂÆöÁ±ªÂûãÁöÑÂ≠êÊéßÂà∂Âô®]]></title>
    <url>%2FiOS%2F%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%90%E6%8E%A7%E5%88%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[ÂΩìÈúÄË¶ÅËé∑ÂèñÂΩìÂâçÊéßÂà∂Âô®ÁöÑÊåáÂÆöÁ±ªÂûãÁöÑÂ≠êÊéßÂà∂Âô®Êó∂ÔºåÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãËß£ÂÜ≥ÊñπÊ°àÔºö 123456789- (UIViewController *)childViewControllerWithType:(Class)type &#123; for (UIViewController *controller in self.childViewControllers) &#123; if ([controller isKindOfClass:type]) &#123; return controller; &#125; &#125; NSLog(@"Requested controller of type %@ was not found.", NSStringFromClass(type)); return nil;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UIView ÊîπÂèòËß¶Êë∏ËåÉÂõ¥]]></title>
    <url>%2FiOS%2FUIView%20%E6%94%B9%E5%8F%98%E8%A7%A6%E6%91%B8%E8%8C%83%E5%9B%B4%2F</url>
    <content type="text"><![CDATA[ÂºÄÂèë‰∏≠Â∏∏‰ºöÈÅáÂà∞ËøôÊ†∑‰∏ÄÁßçÊÉÖÂÜµÔºåUI ËÆæËÆ°ÁöÑÊéß‰ª∂ÂæàÂ∞èÔºåÁî®Êà∑ÂæàÈöæÊìç‰ΩúÔºåÊÉ≥Ë¶ÅÊâ©Â§ßÁÇπÂáªËåÉÂõ¥„ÄÇÂºÄÂèëÂê¨Âà∞ÔºåÁÆÄÂçïÔºåÊâ©Â§ßÊéß‰ª∂Â§ßÂ∞èÂ∞±Âæó‰∫Ü„ÄÇÁÑ∂ÔºåUI Â∏åÊúõ‰øùÊåÅÂéüÂ§ßÂ∞è„ÄÇÂ¶Ç‰ΩïÊó¢‰∏çÊîπÂèòÊéß‰ª∂Â§ßÂ∞èÔºåÂèàÂèØ‰ª•ÊîπÂèòÊéß‰ª∂ÁöÑËß¶Êë∏ËåÉÂõ¥Âë¢„ÄÇ UIView ÂèØÈÄöËøá‰∏§ÁßçÊñπÂºèÂú®‰∏çÊîπÂèòËßÜÂõæÂ§ßÂ∞èÁöÑÊÉÖÂÜµ‰∏ãÊîπÂèòËß¶Êë∏ËåÉÂõ¥ÁöÑÂ§ßÂ∞è„ÄÇ 1234567891011121314// ÊñπÂºè‰∏ÄÔºöÈáçÂÜô -pointInside:withEvent: ÊñπÊ≥ï- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent*)event &#123; //Ëé∑ÂèñÂΩìÂâçbuttonÁöÑÂÆûÈôÖÂ§ßÂ∞è CGRect bounds = self.bounds; //Ëã•ÂéüÁÉ≠Âå∫Â∞è‰∫é44x44ÔºåÂàôÊîæÂ§ßÁÉ≠Âå∫ÔºåÂê¶Âàô‰øùÊåÅÂéüÂ§ßÂ∞è‰∏çÂèò CGFloat widthDelta = MAX(44.0 - bounds.size.width, 0); CGFloat heightDelta = MAX(44.0 - bounds.size.height, 0); //Êâ©Â§ßbounds bounds = CGRectInset(bounds, -0.5 * widthDelta, -0.5 * heightDelta); //Â¶ÇÊûúÁÇπÂáªÁöÑÁÇπ Âú® Êñ∞ÁöÑboundsÈáåÔºåÂ∞±ËøîÂõûYES return CGRectContainsPoint(bounds, point);&#125; 1234567891011121314// ÊñπÂºè‰∫åÔºöÈáçÂÜô -hitTest:withEvent: ÊñπÊ≥ï- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123; //Ëé∑ÂèñÂΩìÂâçbuttonÁöÑÂÆûÈôÖÂ§ßÂ∞è CGRect bounds = self.bounds; //Ëã•ÂéüÁÉ≠Âå∫Â∞è‰∫é44x44ÔºåÂàôÊîæÂ§ßÁÉ≠Âå∫ÔºåÂê¶Âàô‰øùÊåÅÂéüÂ§ßÂ∞è‰∏çÂèò CGFloat widthDelta = MAX(44.0 - bounds.size.width, 0); CGFloat heightDelta = MAX(44.0 - bounds.size.height, 0); //Êâ©Â§ßbounds // -0.5 * widthDelta, -0.5 * heightDelta bounds = CGRectInset(bounds, -0.5 * widthDelta, -0.5 * heightDelta); return CGRectContainsPoint(bounds, point) ? self : nil;&#125; üéÅÂΩ©Ëõã ÂèØ‰ª•Áã¨Á´ãÂ∞ÅË£ÖÂà∞ UIView ÁöÑÂàÜÁ±ª‰∏≠Ôºå‰ª•ÂêéÂè™Ë¶ÅËÆæÁΩÆÂ±ûÊÄßÂ∞±ÂèØ‰ª•ÂÆûÁé∞Ëß¶Êë∏ËåÉÂõ¥ÁöÑË∞ÉÊï¥üòè„ÄÇ 123// UIView+Bq.h/// ÂèØËß¶Êë∏ËåÉÂõ¥@property (nonatomic, assign) CGSize touchSize; 1234567891011121314151617181920212223242526272829// UIView+Bq.m#import &lt;objc/runtime.h&gt;static void *TouchSizeKey = &amp;TouchSizeKey;@implementation UIView (Bq)- (void)setTouchSize:(CGSize)touchSize &#123; objc_setAssociatedObject(self, &amp;TouchSizeKey, [NSValue valueWithCGSize:touchSize], OBJC_ASSOCIATION_COPY);&#125;- (CGSize)touchSize &#123; NSValue *touchSizeValue = objc_getAssociatedObject(self, &amp;TouchSizeKey); CGSize touchSize = touchSizeValue.CGSizeValue; if (!touchSizeValue) &#123; touchSize = self.bounds.size; &#125; return touchSize;&#125;#pragma mark - method rewrite- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event &#123; CGFloat widthDelta = self.touchSize.width - CGRectGetWidth(self.bounds); CGFloat heightDelta = self.touchSize.height - CGRectGetHeight(self.bounds); CGRect bounds = CGRectInset(self.bounds, -0.5 * widthDelta, -0.5 * heightDelta); return CGRectContainsPoint(bounds, point);&#125;@end]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÂØºËà™ÊéßÂà∂Ê†èÈÄèÊòé]]></title>
    <url>%2FiOS%2F%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E6%A0%8F%E9%80%8F%E6%98%8E%2F</url>
    <content type="text"><![CDATA[ËÆæÁΩÆ UINavigationBar ÈÄèÊòéÁöÑÊñπÂºèÊúâËÆ∏Â§ö„ÄÇÊúÄÁÆÄÂçïÁöÑÊñπÂºèÂ¶ÇÔºö 1[[[self.navigationBar subviews] objectAtIndex:0] setAlpha:!hidden];]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[‰æøÊç∑Ëé∑Âèñ AVAsset ËΩ®ÈÅì]]></title>
    <url>%2FiOS%2F%E4%BE%BF%E6%8D%B7%E8%8E%B7%E5%8F%96%20AVAsset%20%E8%BD%A8%E9%81%93%2F</url>
    <content type="text"><![CDATA[AVAsset ÁöÑËÆ∏Â§öÂÆûÁî®ÁöÑÂ±ûÊÄßÈÉΩÂ≠òÂÇ®Âú®ÂÖ∂ËΩ®ÈÅìÔºàAVAssetTrackÔºâÂØπË±°‰∏≠Ôºå‰æãÂ¶ÇÔºåmediaType„ÄÅnaturalSize„ÄÅpreferredTransform„ÄÇÂèñÂá∫ AVAsset ÂØπË±°ÁöÑËßÜÈ¢ëËΩ®ÈÅìÔºåÂèØ‰ª•ËøôÊ†∑ÂÅöÔºöAVAssetTrack *assetTrack = [asset tracksWithMediaType:AVMediaTypeVideo].firstObject;„ÄÇÂèØ‰ª•ÈÄöËøá‰∏∫ AVAsset Ê∑ªÂä†ÂàÜÁ±ªÁÆÄÂåñËøô‰∏ÄÊìç‰Ωú„ÄÇ ‰∏ãÈù¢ÁªôÂá∫ÂèñÂá∫ AVAsset ÂØπË±°ÁöÑÈ¶ñ‰∏™ËßÜÈ¢ëËΩ®ÈÅìÂíåÈü≥È¢ëËΩ®ÈÅìÁöÑÂÆûÁé∞ÊñπÊ≥ï„ÄÇ 1234567- (AVAssetTrack *)videoTrack &#123; return [self tracksWithMediaType:AVMediaTypeVideo].firstObject;&#125;- (AVAssetTrack *)audioTrack &#123; return [self tracksWithMediaType:AVMediaTypeAudio].firstObject;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>AVFoundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CMTime/CMTimeRange NSDictionary]]></title>
    <url>%2FiOS%2FCMTime%20CMTimeRange%20%20-%20%20NSDictionary%2F</url>
    <content type="text"><![CDATA[ÂΩìÊàë‰ª¨Âú®ÂØπ CGRect ÂΩíÊ°£Ëß£Ê°£Êó∂ÔºåÂèØ‰ª•‰ΩøÁî® NSString * NSStringFromCGRect ( CGRect rect ); ÂáΩÊï∞ËΩ¨Âåñ‰∏∫ NSStringÔºõ‰ΩøÁî® CGRect CGRectFromString ( NSString *string ); ‰ªé NSString ÂØπË±°ËøòÂéü‰∏∫ CGRect„ÄÇ ÈÇ£‰πàÔºåÂØπ‰∫é CoreMedia ÁöÑ CMTime Âíå CMTimeRange ÊòØÂê¶ÊúâÁ±ª‰ººÁöÑÂáΩÊï∞ËΩ¨Âåñ‰∏∫ Objective-C ÂØπË±°Âë¢ÔºüÁÑ∂Âπ∂ÂçµÔºÅ ‰∏äÂ∏ùÁªô‰Ω†ÂÖ≥‰∫Ü‰∏ÄÊâáÈó®ÔºåÈÇ£ÂèØËÉΩËøòÊúâÂêéÈó®Âë¢„ÄÇ‰ªîÁªÜÊü•ÁúãÊñáÊ°£ÔºåËøòÁúüÂèëÁé∞Êúâ‰∏ÄÁªÑÂØπÂ∫îÁöÑÂáΩÊï∞ÔºåÂè™ÊòØÈÄöËøáÂ≠óÂÖ∏Êù•ÂÆûÁé∞„ÄÇ 12345678910111213141516171819202122232425/// CMTime -&gt; NSDictionaryNSDictionary *NSDictionaryWithTime(CMTime time) &#123; NSDictionary *tempDic = CFBridgingRelease(CMTimeCopyAsDictionary(time, NULL)); NSMutableDictionary *dic = tempDic.mutableCopy; dic[@"desc"] = NSStringFromCMTime(time); return dic;&#125;/// NSDictionary -&gt; CMTimeCMTime CMTimeWithDictionary(NSDictionary *dict) &#123; return CMTimeMakeFromDictionary((__bridge CFDictionaryRef)dict);&#125;/// CMTimeRange -&gt; NSDictionaryNSDictionary *NSDictionaryWithTimeRange(CMTimeRange timeRange) &#123; NSDictionary *tempDic = CFBridgingRelease(CMTimeRangeCopyAsDictionary(timeRange, NULL)); NSMutableDictionary *dic = tempDic.mutableCopy; dic[@"desc"] = NSStringFromCMTimeRange(timeRange); return dic;&#125;/// NSDictionary -&gt; CMTimeRangeCMTimeRange CMTimeRangeWithDictionary(NSDictionary *dict) &#123; return CMTimeRangeMakeFromDictionary((__bridge CFDictionaryRef)dict);&#125; üéÅÂΩ©Ëõã dic[@&quot;desc&quot;] = NSStringFromCMTime(time);ÔºåËøôÈáåÊàëÂú® CMTime ËΩ¨Êç¢ÁöÑÂ≠óÂÖ∏‰∏≠Âä†‰∫Ü‰∏Ä‰∏™Â≠óÊÆµÔºåÁî®‰∫éÊèèËø∞Ëøô‰∏™ CMTime Â≠óÂÖ∏ÁöÑÂÄº„ÄÇËøôÂ∞±‰∏çÁî®Ëá™Â∑±ÈÄöËøáËÆ°ÁÆó CMTime ÂæóÂá∫ÂÆÉË°®Á§∫ÁöÑÊòØÂ§öÂ∞ëÁßí„ÄÇ NSString *NSStringFromCMTime(CMTime time); ÊòØÊàëËá™Â∑±ÂÆûÁé∞ÁöÑÊñπÊ≥ïÔºå‰Ω†ÂèØ‰ª•ÁÆÄÂçïÂú∞ÂÆûÁé∞Ôºö 1234NSString *NSStringFromCMTime(CMTime time) &#123; NSTimeInterval interval = CMTimeGetSeconds(time); return @(interval).description;&#125; NSString *NSStringFromCMTimeRange(CMTimeRange timeRange); Á±ª‰ººÂú∞ÂÆûÁé∞ÔºåÊèèËø∞ CMTimeRange ÁöÑÂÄº„ÄÇ]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>AVFoundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÂÆπÂô®ËßÜÂõæÊéßÂà∂Âô®Â≠êÊéßÂà∂Âô®Ê†∑ÂºèÊéßÂà∂]]></title>
    <url>%2FiOS%2F%E5%AE%B9%E5%99%A8%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AD%90%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A0%B7%E5%BC%8F%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[Âú®ÊéßÂà∂ËßÜÂõæÊéßÂà∂Âô®ÔºàUIViewControllerÔºâÊóãËΩ¨ÊñπÂêëÊó∂ÔºåÈÄöÂ∏∏Âè™ÈúÄË¶ÅÂÆûÁé∞‰ª•‰∏ã‰∏â‰∏™ÊñπÊ≥ïÔºö -shouldAutorotate -supportedInterfaceOrientations -preferredStatusBarStyle ÁÑ∂ËÄåÔºåÂΩìËßÜÂõæÊéßÂà∂Â§ñËøòÂ•óÁùÄ‰∏ÄÂ±Ç UINavigationController„ÄÅUITabBarController ËøôÊ†∑ÁöÑÂÆπÂô®ÊéßÂà∂Âô®Êó∂ÔºåËøô‰∫õÊñπÊ≥ïÂ∞±‰ºöÂ§±Êïà„ÄÇËß£ÂÜ≥ÊñπÊ≥ïÂæàÁÆÄÂçïÔºåÂè™Ë¶ÅÂÆûÁé∞Ëá™Â∑±ÂÆûÁé∞ UINavigationController„ÄÅUITabBarControllerÔºåÂπ∂ÂÆûÁé∞‰ª•‰∏äÁöÑ‰∏â‰∏™ÊñπÊ≥ï„ÄÇËõãÔºåÂ∞±‰∏∫‰∫ÜÊéßÂà∂ÂÖ∂Â≠êËßÜÂõæÊéßÂà∂Âô®ÁöÑÊñπÂêëÔºåÂ∞±ÂÅö‰∏Ä‰∏™Â≠êÁ±ªÔºåÊú™ÂÖçÊúâÁÇπÂ§ßÊùêÂ∞èÁî®„ÄÇËÄå‰∏îÔºåÂØπ‰∫éÈúÄË¶ÅÊéßÂà∂ÊØè‰∏™Â≠êÊéßÂà∂Âô®ÁöÑ‰∏çÂêåÊóãËΩ¨ÊñπÂêëÔºåËøòÈúÄË¶ÅÊ†πÊçÆÂ≠êÁ±ªÁ±ªÂêçËøõË°åÂàÜÊîØÂ§ÑÁêÜ„ÄÇËøôÈáåÊèêÂá∫‰∏ÄÁßçÊõ¥Â•ΩÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ ÂàõÂª∫ÂÆπÂô®ËßÜÂõæÊéßÂà∂Âô®ÂàÜÁ±ªÔºåËÆ©ÂÖ∂Â≠êËßÜÂõæÊéßÂà∂Âô®Áõ¥Êé•ÁÆ°ÁêÜËá™Â∑±ÁöÑÊóãËΩ¨„ÄÇ Ê≥®ÊÑèÔºöÂΩìÊ∑ªÂä†ËøôÊ†∑ÁöÑÈáçÂÜôÂéüÊú¨ÊñπÊ≥ïÁöÑÂàÜÁ±ªÂà∞È°πÁõÆÁºñËØëÔºåÈ°πÁõÆ‰∏≠ÁöÑÊâÄÊúâËØ•Á±ªÂèäÂÖ∂Â≠êÁ±ªÂØπË±°ÈÉΩ‰ºöÁîüÊïàÔºåÈÉΩ‰ºöÂèóÂà∞ÂΩ±Âìç„ÄÇÊç¢Âè•ËØùËØ¥ÔºåÂè™Ë¶ÅÊ∑ªÂä†ËøôÊ†∑ÁöÑÂàÜÁ±ªÔºå‰∏çÈúÄË¶ÅÂºïÂÖ•Â§¥Êñá‰ª∂ÈÉΩÂèØÂØπÊú¨Á±ªÁîüÊïà„ÄÇ 123456789101112// UITabBarController+Bq.m- (BOOL)shouldAutorotate &#123; return self.selectedViewController.shouldAutorotate;&#125;- (UIInterfaceOrientationMask)supportedInterfaceOrientations &#123; return self.selectedViewController.supportedInterfaceOrientations;&#125;- (UIStatusBarStyle)preferredStatusBarStyle &#123; return self.selectedViewController.preferredStatusBarStyle;&#125; 12345678910111213141516// UINavigationController+Bq.m- (BOOL)shouldAutorotate &#123; return self.topViewController.shouldAutorotate;&#125;- (UIInterfaceOrientationMask)supportedInterfaceOrientations &#123; return self.topViewController.supportedInterfaceOrientations;&#125;- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation &#123; return self.topViewController.preferredInterfaceOrientationForPresentation;&#125;- (UIStatusBarStyle)preferredStatusBarStyle &#123; return self.topViewController.preferredStatusBarStyle;&#125; üéÅÂΩ©Ëõã Á±ª‰ººÁöÑÔºåÂØπ‰∫éËÆæÁΩÆÁä∂ÊÄÅÊ†èÈöêËóè‰πüÂêåÁêÜ„ÄÇ 123456789// UITabBarController+Bq.m- (BOOL)prefersStatusBarHidden &#123; return self.selectedViewController.prefersStatusBarHidden;&#125;// UINavigationController+Bq.m- (BOOL)prefersStatusBarHidden &#123; return self.topViewController.prefersStatusBarHidden;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[‰∏∫Êéß‰ª∂Âä†‰∏™ÂêçÁß∞Ê†áËØÜÁ¨¶]]></title>
    <url>%2FiOS%2F%E4%B8%BA%E6%8E%A7%E4%BB%B6%E5%8A%A0%E4%B8%AA%E5%90%8D%E7%A7%B0%E6%A0%87%E8%AF%86%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[Êó•Â∏∏ÂºÄÂèë‰∏≠ÔºåÈúÄË¶ÅÂ§ÑÁêÜÂêÑÁßçÂêÑÊ†∑ÁöÑÊéß‰ª∂ÔºàUIViewÔºâ„ÄÇ‰∏∫‰∫ÜÂå∫ÂàÜ‰∏çÂêåÁöÑÊéß‰ª∂ÔºåÊàë‰ª¨‰ºöÁªôÊéß‰ª∂ÂØπË±°Âèñ‰∏çÂêåÁöÑÂêçÂ≠ó„ÄÇ‰∏∫‰Ωï‰∏çÁõ¥Êé•ÁªôÊéß‰ª∂Âä†‰∏™Ê†áÈ¢ò/ÂêçÁß∞Ê†áËØÜÁ¨¶Â±ûÊÄßÂë¢„ÄÇ ‰∏∫ UIView ÂàõÂª∫ÂàÜÁ±ªÔºåÊ∑ªÂä†Â±ûÊÄß„ÄÇ 12345678910111213141516// .h/// Êéß‰ª∂Ê†áÈ¢ò@property (nonatomic, strong) IBInspectable NSString *title;// .m#import &lt;objc/runtime.h&gt;static void *TitleKey = &amp;TitleKey;#pragma mark - property- (void)setTitle:(NSString *)title &#123; objc_setAssociatedObject(self, &amp;TitleKey, title, OBJC_ASSOCIATION_COPY);&#125;- (NSString *)title &#123; return objc_getAssociatedObject(self, &amp;TitleKey);&#125; üéÅÂΩ©Ëõã ÊàñËÆ∏‰Ω†ÂèëÁé∞‰∫ÜÔºåËøôÈáåÂ±ûÊÄßÂä†‰∫Ü‰∏™ IBInspectable ÂÖ≥ÈîÆÂ≠óÁöÑ‰øÆÈ•∞ÔºåËøôÊ†∑ÂèØ‰ª•Áõ¥Êé•Âú® Interface Builder ‰∏≠‰øÆÊîπËØ•ÂÄº„ÄÇ]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UIImage Â∑•ÂÖ∑]]></title>
    <url>%2FiOS%2FUIImage%20%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[‰ΩøÁî®Áõ∏Êú∫ÊãçÊëÑÁöÑÂõæÁâáÔºàUIImageÔºâÔºåÊúâ‰∏Ä‰∏™ imageOrientation ÁöÑÂ±ûÊÄßÔºåËØ•Â±ûÊÄßËÆ∞ÂΩï‰∫ÜÂõæÁâáÁöÑÊóãËΩ¨ÊñπÂêë‰ø°ÊÅØÔºåÂú®ÂºÄÂèë‰∏≠ÔºåÂ¶ÇÊûúÁõ¥Êé•‰ΩøÁî® UIImageÔºå‰æãÂ¶Ç‰∏∫ CALayer ËÆæÁΩÆ contentsÔºåÂ∞±ÂèØËÉΩÂæóÂà∞‰∏çÊ≠£Á°ÆÁöÑÂõæÁâáÊñπÂêë„ÄÇËß£ÂÜ≥ÊñπÂºèÂæàÁÆÄÂçïÔºåÈáçÁªò‰∏Ä‰∏ãÂõæÁâáÂ∞±Â•Ω„ÄÇ ËøôÈáåÁªôÂá∫ÁöÑÊñπÊ°àÈÄöËøáÁªô UIImage Ê∑ªÂä†ÂàÜÁ±ªÂÆûÁé∞„ÄÇ 1234567891011121314/// Áü´Ê≠£ÂõæÁâáÊñπÂêë- (UIImage *)fixImageOrientation &#123; UIImageOrientation imageOrientation = self.imageOrientation; UIImage *newImage = self; if (imageOrientation != UIImageOrientationUp) &#123; // Ë∞ÉÊï¥ÂõæÁâáËßíÂ∫¶ UIGraphicsBeginImageContext(self.size); [self drawInRect:CGRectMake(0, 0, self.size.width, self.size.height)]; newImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); &#125; return newImage;&#125; üéÅÂΩ©Ëõã È°∫‰æøÂú∞ÔºåÁªôÂá∫‰∏Ä‰∫õÂéãÁº©ÂõæÁâáÁöÑÊñπÊ≥ï„ÄÇ 12345678910111213141516171819202122232425262728293031/// ÊåâÊØî‰æãÁº©ÊîæÂπ∂ÈáçÁªòÂõæÁâá- (UIImage *)scaleImage:(CGFloat)scale &#123; if (scale &gt; 1) &#123; return self; &#125; CGSize newSize = CGSizeMake(self.size.width * scale, self.size.height * scale); return [self resizeImage:newSize];&#125;/// ÈáçÁªòÂõæÁâá- (UIImage *)resizeImage:(CGSize)newSize &#123; UIGraphicsBeginImageContext(newSize); [self drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)]; UIImage *newSizeImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return newSizeImage;&#125;/// ÂéãÁº©ÂõæÁâá- (UIImage *)compressImageWithQuality:(CGFloat)compressionQuality &#123; UIImage *newImage = self; NSData *imageData = UIImageJPEGRepresentation(self, compressionQuality); if (imageData) &#123; newImage = [UIImage imageWithData:imageData]; &#125; return newImage;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÁÆÄÂçïÂÆûÁé∞Ë∑≥ËΩ¨Âà∞Â∏¶ Done ÊåâÈíÆÁöÑÂØºËà™ÊéßÂà∂Âô®]]></title>
    <url>%2FiOS%2F%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%B8%A6%20Done%20%E6%8C%89%E9%92%AE%E7%9A%84%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Âú®Êó•Â∏∏ÂºÄÂèë‰∏≠ÔºåÁªèÂ∏∏ÈúÄË¶ÅÊ®°ÊÄÅË∑≥ËΩ¨Âà∞‰∏Ä‰∏™Â∏¶‚ÄúÂÆåÊàê‚ÄùÊåâÈíÆÁöÑÂØºËà™ÊéßÂà∂Âô®ÔºåÂÖ∂Ê†πÊéßÂà∂Âô®Êâç‰∏∫Êàë‰ª¨ÈúÄË¶ÅÁöÑËßÜÂõæÊéßÂà∂Âô®„ÄÇ ËøôÊó∂ÔºåÊàë‰ª¨ÂèØ‰ª•Âú® UIViewController ÂÅö‰∏Ä‰∏™ÂàÜÁ±ª„ÄÇÂàÜÁ±ª‰∏≠ÊñπÊ≥ïÂè™Ë¶Å‰º†ÂÖ•Êàë‰ª¨ÈúÄË¶ÅÁöÑÊ†∏ÂøÉËßÜÂõæÊéßÂà∂Âô®ÂØπË±°ÔºåË∞ÉÁî®ÊñπÊ≥ïÂç≥ÂèØÂÆûÁé∞Ê®°ÊÄÅË∑≥ËΩ¨Âà∞ËØ•ËßÜÂõæÊéßÂà∂Âô®ÁöÑÂØºËà™ÊéßÂà∂Âô®„ÄÇ 1234567891011/// Ê®°ÊÄÅË∑≥ËΩ¨Âà∞Â∏¶ÂÆåÊàêÂØºËà™Ê†èÁöÑËßÜÂõæÊéßÂà∂Âô®- (void)presentDoneNavigationViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)flag completion:(void (^)(void))completion &#123; UINavigationController *navigation = [[UINavigationController alloc] initWithRootViewController:viewControllerToPresent]; viewControllerToPresent.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(dismiss:)]; [self presentViewController:viewControllerToPresent.navigationController animated:flag completion:completion]; navigation = nil;&#125;- (void)dismiss:(id)sender &#123; [self dismissViewControllerAnimated:YES completion:^&#123; &#125;];&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ËÆ°ÁÆóÊñáÊú¨ MD5„ÄÅSHA1]]></title>
    <url>%2FiOS%2F%E8%AE%A1%E7%AE%97%E6%96%87%E6%9C%AC%20MD5%E3%80%81SHA1%2F</url>
    <content type="text"><![CDATA[‰∏∫ NSString Ê∑ªÂä†ËÆ°ÁÆó MD5 Âíå SHA1 ÁöÑÂàÜÁ±ª„ÄÇ 12345678910111213141516171819202122232425262728293031#import &lt;CommonCrypto/CommonDigest.h&gt;#import &lt;CommonCrypto/CommonCryptor.h&gt;- (NSString *)md5 &#123; const char* str = [self UTF8String]; unsigned char result[CC_MD5_DIGEST_LENGTH]; CC_MD5(str, (CC_LONG)strlen(str), result); NSMutableString *ret = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH*2]; for(int i = 0; i&lt;CC_MD5_DIGEST_LENGTH; i++) &#123; [ret appendFormat:@"%02x",result[i]]; &#125; return ret;&#125;- (NSString *)sha1 &#123; const char *cstr = [self cStringUsingEncoding:NSUTF8StringEncoding]; NSData *data = [NSData dataWithBytes:cstr length:self.length]; //‰ΩøÁî®ÂØπÂ∫îÁöÑCC_SHA1,CC_SHA256,CC_SHA384,CC_SHA512ÁöÑÈïøÂ∫¶ÂàÜÂà´ÊòØ20,32,48,64 uint8_t digest[CC_SHA1_DIGEST_LENGTH]; //‰ΩøÁî®ÂØπÂ∫îÁöÑCC_SHA256,CC_SHA384,CC_SHA512 CC_SHA1(data.bytes, (CC_LONG)data.length, digest); NSMutableString *output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2]; for(int i = 0; i &lt; CC_SHA1_DIGEST_LENGTH; i++) [output appendFormat:@"%02x", digest[i]]; return output;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÈöèÊú∫Êï∞]]></title>
    <url>%2FiOS%2F%E9%9A%8F%E6%9C%BA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[ÂØπÊó•Â∏∏ÊúÄÂ∏∏Áî®Âà∞ÁöÑÈöèÊú∫Êï∞Â∞ÅË£Ö‰∫Ü‰∏§‰∏™ÈôêÂà∂ÈöèÊú∫Êï∞ÁîüÊàêËåÉÂõ¥ÁöÑ C ÂáΩÊï∞„ÄÇ 1234567891011/// ÈöèÊú∫Êï∞ [from, to]NSInteger RandomValue(int fromValue, int toValue) &#123; NSInteger randomValue = arc4random() % (toValue - fromValue + 1) + fromValue; return randomValue;&#125;/// ÈöèÊú∫Êï∞ [0, to]NSInteger RandomToValue(int toValue) &#123; NSInteger randomValue = arc4random() % (toValue + 1); return randomValue;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÊñáÊ°£Áõ∏ÂØπË∑ØÂæÑ ÁªùÂØπË∑ØÂæÑ]]></title>
    <url>%2FiOS%2F%E6%96%87%E6%A1%A3%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%20%20-%20%20%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84_Post%2F</url>
    <content type="text"><![CDATA[Âú®ÂÅöÂΩíÊ°£ÂºÄÂèëÊó∂ÔºåÈúÄË¶ÅÂ≠òÂÇ® App ÊñáÊ°£ÁõÆÂΩï‰∏ãÁöÑ‰∏Ä‰∏™ËµÑÊ∫êÔºå‰∏ÄÂºÄÂßãÁÆÄÂçïÂ≠òÂÇ®‰∫ÜËµÑÊ∫êÁöÑÂÖ®Ë∑ØÂæÑÔºåÂèëÁé∞ App ÈáçÂêØÂêéÂÜç‰πüËé∑Âèñ‰∏ç‰∫ÜÈÇ£‰∏™ËµÑÊ∫ê‰∫ÜÔºå‰∏ä‰∏ä‰∏ã‰∏ãÊ£ÄÊü•‰∫Ü‰∏ÄÈÄöÈÉΩÊ≤°ÂèëÁé∞ÈóÆÈ¢ò„ÄÇÂêéÊù•ÔºåÊíí‰∫ÜÊ≥°Â∞øÔºåÊ¥ó‰∫Ü‰∏™Êâã„ÄÇÂØπÂì¶ÔºåÊ≤ôÁõíÔºÅÂõ†Ê≠§ÊØèÊ¨° App ÁöÑÊñáÊ°£Ê†πÁõÆÂΩïÂ∞±‰ºöÊîπÂèò„ÄÇ ÈÇ£‰πàÔºåÂÅö‰∏™Áõ∏ÂØπË∑ØÂæÑÂ∞±Â•ΩÔºÅüò≤ Âú®ÂΩíÊ°£ÂâçÊääÁªùÂØπË∑ØÂæÑËΩ¨‰∏∫Áõ∏ÂØπË∑ØÂæÑÔºåÁÑ∂ÂêéÂΩíÊ°£Â≠òÂÇ®ÔºõËß£Ê°£ÂâçÂÖàÊääÁõ∏ÂØπË∑ØÂæÑËΩ¨Êç¢‰∏∫ÁªùÂØπË∑ØÂæÑÔºåÁÑ∂ÂêéËß£Ê°£ËøòÂéüÊ®°Âûã„ÄÇÂÆåÁæéüëæ~ 12345678910111213/// path -&gt; documentPathNSString *DocumentPathWithPath(NSString *path) &#123; NSString *documentDir = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).lastObject; NSString *documentPath = [path stringByReplacingOccurrencesOfString:documentDir withString:@""]; return documentPath;&#125;/// documentPath -&gt; pathNSString *PathWithDocumentPath(NSString *documentPath) &#123; NSString *documentDir = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).lastObject; NSString *path = [documentDir stringByAppendingPathComponent:documentPath]; return path;&#125;]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Â≠óÁ¨¶‰∏≤Ê†°È™å]]></title>
    <url>%2FiOS%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%A1%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[Âú®ÂºÄÂèëÁôªÈôÜÁïåÈù¢Êó∂Ôºå‰∏∫‰∫ÜÂáèÂ∞ëÂèëÈÄÅËØ∑Ê±ÇÁöÑÊ¨°Êï∞ÂíåÊúçÂä°Âô®Ê†°È™åÁöÑÂ§çÊùÇÂ∫¶ÔºåÂèØ‰ª•Áé∞Âú®ÂÆ¢Êà∑Á´ØÂÅö‰∏Ä‰∫õÊ†°È™åÂíåÂà§Êñ≠ÔºåÂπ∂‰ª•ÊÅ∞ÂΩìÁöÑÂΩ¢ÂºèË°®ËææÁªôÁî®Êà∑„ÄÇËøôÂ∞±ÂÖç‰∏ç‰∫ÜÂÅöËæìÂÖ•ÂÜÖÂÆπÁöÑÂà§Êñ≠„ÄÇ‰∏ãÈù¢ÁªôÂá∫Âá†ÁßçËæìÂÖ•Ê†°È™åÁöÑÂá†ÁßçÁ±ªÂûã„ÄÇ Âú®ÂÅöÊ†°È™å‰πãÂâçÔºåÊàëÂ∏∏‰ºöÂÖàÊ∏ÖÈô§Áî®Êà∑ËæìÂÖ•ÁöÑÂ§ö‰ΩôÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶Ôºå‰æãÂ¶ÇÁ©∫Ê†º„ÄÅÊç¢Ë°å„ÄÇ 12// Ê∏ÖÈô§Á©∫ÁôΩÂ≠óÁ¨¶inputText = [inputText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]; ÁÑ∂ÂêéËøõË°åÊ†°È™åÔºå‰∏ãÈù¢‰ª• C ÂáΩÊï∞ÂÆûÁé∞„ÄÇ 1234567891011121314/// ÊâãÊú∫Âè∑Á†ÅÊ†°È™åBOOL IsTelNumber(NSString *telNumber)&#123; NSString *pattern = @"^1+[3578]+\\d&#123;9&#125;"; NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", pattern]; BOOL isMatch = [pred evaluateWithObject:telNumber]; return isMatch;&#125;/// ÁîµÈÇÆÊ†°È™åBOOL IsEmail(NSString *email) &#123; NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"; NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex]; return [emailTest evaluateWithObject:email];&#125; üéÅÂΩ©Ëõã Âª∫ËÆÆÁõ¥Êé•Ê∑ªÂä†‰∏∫ NSString ÂàÜÁ±ªÔºå‰ΩøÁî®Ëµ∑Êù•Êõ¥Âä†Êñπ‰æøÔºàÊñπ‰æøÂÆûÁé∞ÈìæÂºèÁºñÁ®ãüòèÔºâ„ÄÇ]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UITableView ÈôêÂà∂È´òÂ∫¶]]></title>
    <url>%2FiOS%2FUITableView%20%E9%99%90%E5%88%B6%E9%AB%98%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[UITableView ËÆæÁΩÆÈ´òÂ∫¶ÂèØ‰ª•ËØ¥ÊòØ‰∏ÄÈó®Ëâ∫ÊúØÔºåËÆæÁΩÆÂçïÂÖÉÊ†ºË°åÈ´òÁöÑÊñπÊ°àÊúâÂæàÂ§öÔºåÊú¨Êñá‰∏çÂú®ÂèôËø∞„ÄÇ‰∏ãÈù¢Âè™Â±ïÂºÄÂØπË°®Ê†ºÂ§¥Â∞æËßÜÂõæÂíåÂå∫Â§¥Âå∫Â∞æÈ´òÂ∫¶ÁöÑËÆæÁΩÆ„ÄÇ ÈôêÂà∂Ë°®Ê†ºÂ§¥Â∞æËßÜÂõæÂΩì‰∏ç‰ΩøÁî® header„ÄÅfootter Êó∂ÔºåË¶ÅÊÉ≥ÂΩªÂ∫ïÂéªÈô§ÂÖ∂Âç†Áî®ÁöÑÈ´òÂ∫¶ÊàñÊ®™Á∫øÔºåÈúÄË¶Å‰ª£Á†ÅÂÆûÁé∞„ÄÇ 1234// ÂéªÈô§Ë°®Â∞æÂ§ö‰ΩôÊ®™Á∫øtableView.tableFooterView = [[UIView alloc] init];// ÂéªÈô§Âå∫Â§¥Â§ö‰ΩôÂç†Áî®tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, CGFLOAT_MIN)]; ÈôêÂà∂Âå∫Â§¥Âå∫Â∞æÂç†Áî®ÂºÄÂèëÊó∂ÈúÄË¶ÅÊòæÁ§∫Âå∫Â§¥ÂíåÂå∫Â∞æÈ´òÂ∫¶Êó∂ÔºåÂèØ‰ΩøÁî®‰∏§ÁßçÊñπÂºèÔºö ËÆæÁΩÆ tableView ÁöÑ sectionHeaderHeight Âíå sectionFooterHeight Â±ûÊÄß„ÄÇ ÂΩìËøô‰∏§ËÄÖÊúâÂÄºÊó∂ÔºåtableView ‰ºö‰ΩøÁî®Êé®ËçêÁöÑË°®Ê†ºÂ§¥ËßÜÂõæÔºåË°®ÊúÄÈ°∂Á´Ø‰ºöÁïô‰∏Ä‰∫õÁ©∫Èó¥„ÄÇË¶ÅÊÉ≥ÂéªÈô§Ëøô‰∫õÁ©∫Èó¥ÔºåÂàôÂøÖÈ°ªÁªìÂêà‰∏äÈù¢ÁöÑ‚ÄúÈôêÂà∂Ë°®Ê†ºÂ§¥Â∞æËßÜÂõæ‚ÄùÁöÑÊñπÂºèÂíå‰ª£ÁêÜÊñπÊ≥ïÂÆûÁé∞„ÄÇ ÂÆûÁé∞ tableView ‰ª£ÁêÜÊñπÊ≥ïÔºõ 12345678// ËÆæÁΩÆÂ±ûÊÄßtableView.sectionHeaderHeight = 36;tableView.sectionFooterHeight = 0;// UITableViewDelegate- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section &#123; return 36;&#125; Êé®ËçêÈÄöËøáËÆæÁΩÆ tableView ÁöÑ sectionHeaderHeight Âíå sectionFooterHeight Â±ûÊÄßÂÆûÁé∞Âå∫Èó¥È´òÂ∫¶ÁöÑÁöÑÈôêÂà∂„ÄÇ]]></content>
      <categories>
        <category>iOSÂºÄÂèë</category>
      </categories>
      <tags>
        <tag>UIKit</tag>
        <tag>UITableView</tag>
      </tags>
  </entry>
</search>
